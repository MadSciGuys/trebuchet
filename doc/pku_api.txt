PKU API
=======

TODO:
-----
  * Define a versioning scheme either in the URL or in the payload of requests. The former makes most sense for consistency sake as some supported requests use the GET method which must not include any payload. My suggestion is to have prepend the path with "/v1".
  * Specify which attributes of datablocks and jobs are immutible.
  * Clarify what conceptually constitutes a Job. I am thinking that it takes a single datablock and parameters, and (on success) returns a new datablock, or allow datablocks to be given as parameters.
  * Add booleans and dates/times to Datablock format.

Description: 
------------

JSON-over-HTTP API for PKU services. Consists of several entities which can be created, enumerated by name, retrieved, and filtered. At the highest level, the following entities are exposed: Datablocks and Asynchronous Jobs.

Details:
--------

URL query parameters are not used. Instead, both clients and server transmit JSON payloads over HTTP, each formed specifically for corresponding requests. Each JSON schema attempts to use fully qualified names for every field in every JSON object. Some requests do not require any payload. Some requests require authorization. Clients are expected to preserve "PKU-API-Session-Token" as are set by the Trebuchet server. In other words, the semantics of the "Set-Cookie" header should not be tampered with. For any request, the server may respond with a 500 error which indicates a lack of proper error handling and should be reported to the API implementors. Each PUT and POST request may also return with status code 400 and a JSON object conforming to 'client_error.json' where the request payload is malformed. A request can be malformed if the request does not validate against the corresponding request JSON schema or if any value therein does not match expectations outlined in this document. There is an order to which certain checks should be done. Request validation should be performed before checking for authentication to ease the lives of client implementors. Ideally, if a 403 status code is returned, this implies that once properly authenticated, the same request would succeed, returning a 2xx status code.

The currently supported implementation of the PKU API is called Trebuchet, after the dearly beloved siege weapon of the Middle Ages.

Analysis Interface:
-------------------
  
POST /datablock/filter
  Description:
    List Datablocks that conform to a filter given in the payload.
  Client JSON Payload:
    See 'filter_query.json' where filter_entity = "datablock"
  Server Response:
    a) Status: 200
       Meaning: Filter query succeeded. Desired results are given in the payload.
       JSON Payload:
         See 'datablock_array.json'

POST /datablock/create
  TODO: Discuss how uploads should be coordinated with this. A 'multipart/form-data' POST request containing the datablock files should be sent following this request. The server response for this request should probably include some identifier of the datablock (probably the ID) to be included in the multipart request that follows.
  TODO: Document the "two-part transaction."
  Description:
    Create a new Datablock.
  Notes:
    * Requires user authorization
  Client JSON Payload:
    See 'datablock_create.json'
  Server Response:
    a) Status: 200
       Meaning: Datablock creation initialized. The payload gives a URL to POST the datablock file as a CSV, in order to complete the creation of the datablock.
       JSON Payload:
         See 'datablock_url.json'
         If the date-time in 'datablock_creation_timeout' has passed and the datablock file has not been successfully uploaded, the almost-datablock will be deleted and POST requests to the 'datablock_creation_file_url' will return HTTP 404 as the status code.
    b) Status: 201
       Meaning: Datablock successfully created from request.
       JSON Payload:
         See 'datablock_metadata.json'
    c) Status: 403
       Meaning: The client is either not authenticated (no valid "PKU-API-Session-Token" session cookie) or is authenticated but not permitted to create a new datablock.
       JSON Payload:
         See 'client_error.json'

POST <datablock_creation_file_url>
  Description:
    Upload the datablock as a file.
  Notes:
    * See 'datablock_url.json' to understand the origin of the URL of this request.
  Client Request:
    Should have the following headers set:
      Content-Type: multipart/form-data
      
  Server Response:
    
GET /datablock/:datablock_id/metadata
  TODO: Discuss authorization of these requests.
  Description:
    Get a complete set of metadata corresponding with the datablock specified by its ID.
  Server Response:
    a) Status: 200
       Meaning: Datablock with the corresponding 'datablock_id' exists.
       JSON Payload:
         See 'datablock_metadata.json'
    b) Status: 404
       Meaning: Datablock with the corresponding 'datablock_id' does not exist.
       JSON Payload:
         See 'client_error.json'
  
PUT /datablock/:datablock_id/metadata
  TODO: Discuss whether or not we may want users to be able to change to datablocks, possibly guarenteeing immutability by creating a new derived datablock.
  Description:
    Update the datablock corresponding with the given ID. The client-sent payload is a JSON object(key-value pairs) corresponding with configurable datablock attributes.
  Notes:
    * Requires user authorization
  Client JSON Payload:
    See 'datablock_metadata_put_request.json'
  Server Response:
    a) Status: 200
       Meaning: Datablock with corresponding 'datablock_id' does exist and its metadata has been successfully changed as requested.
       JSON Payload:
         See 'datablock_metadata.json'
    b) Status: 404
       Meaning: Datablock with the corresponding 'datablock_id' does not exist.
       JSON Payload:
         See 'client_error.json'

GET /datablock/:datablock_id/all
  Description:
    Entirety of a datablock.
  Server Response:
    a) Status: 200
       Meaning: The datablock corresponding with the given ID exists. The datablock has been returned.
       JSON Payload:
         See 'datablock.json'
    b) Status: 404
       Meaning: Datablock with the corresponding 'datablock_id' does not exist.
       JSON Payload:
         See 'client_error.json'

POST /datablock/:datablock_id/filter
  TODO: Describe abstractly the relationship between the datablock_id and fields in other requests.
  TODO: Describe sorting/ordering behaviour.
  Description:
    Read contents of a single, specific datablock after client-specified filters have been applied.
  Notes:
    * I think that ideally that an interface similar to this could be adopted for fast-paced analysis on datablocks. Filters could take the place of R jobs.
    * Corresponds with the DataBlockFieldQuery type.
  Client JSON Payload:
    See 'datablock_record_filter.json'
  Server Response:
    a) Status: 200
       Meaning: Datablock exists and the filter rules were well-formed and valid. The query succeeded.
       JSON Payload: 
         See 'datablock.json' -- NOTE: Should include a field called 'datablock_filter_fields'.
    b) Status: 404
       Meaning: Datablock with a corresponding ID does not exist.
       JSON Payload:
         See 'client_error.json'
    
DELETE /datablock/:datablock_id
  Description:
    Delete a Datablock corresponding with the ID given in the URL.
  Notes:
    * No client-sent payload
    * No server-sent payload
    * Requires authentication to succeed
  Server Response:
    a) Status: 204
       Meaning: Successfully deleted the datablock corresponding with the given ID.
       * No payload *
    b) Status: 403
       Meaning: The client is either not authenticated (no valid "PKU-API-Session-Token" session cookie) or is authenticated but not permitted to delete this datablock.
       * No payload *
    c) Status: 404
       Meaning: No datablock with the given 'datablock_id' exists.
       * No payload *

GET /job_template/all
  Description:
    List all of the job templates which jobs may reference.
  Server Response:
    a) Status: 200
       Meaning: Contained are all of the job templates.
       JSON Payload:
         See 'job_template_array.json'

GET /job/all
  Description:
    List all jobs.
  Server Response:
    a) Status: 200
       Meaning: All jobs are given in the payload.
       JSON Payload:
         See 'job_array.json'

POST /job/filter
  Description:
    List jobs that conform to a filter given in the payload.
  Client JSON Payload:
    See 'filter_query.json' where filter_entity = "job"
  Server Response:
    a) Status: 200
       Meaning: Filter query succeeded. Desired results are given in the payload.
       JSON Payload:
         See 'job_array.json'

POST /job/create
  Description:
    Create a job with certain parameters. Start the job as soon as possible.
  Notes:
    * Requires user authorization
  Client JSON Payload:
    See 'job_create.json'
  Server Response:
    a) Status: 201
       Meaning: Successful job creation.
       JSON Payload:
         See 'job.json'
    b) Status: 403
       Meaning: Request was valid but the user is not authorized to create a request.
       JSON Payload:
         See 'client_error.json'
       
GET /job/:job_id
  Description:
    Get information about a job given a job ID. Returns immediately. The job may still be running.
  Server Response:
    a) Status: 200
       Meaning: Job with corresponding 'job_id' exists.
       JSON Payload:
         See 'job.json'
    b) Status: 404
       Meaning: No job with the given 'job_id' exists.
       * No payload *

GET /job/:job_id/wait
  Description:
    Get information about a job given a job ID. Returns once the job has completed. If the job is already finished, it returns immediately.
  Server Response:
    a) Status: 200
       Meaning: Job with corresponding 'job_id' exists and it is no longer running.
       JSON Payload:
         See 'job.json'
    b) Status: 404
       Meaning: No job with the given 'job_id' exists.
       * No payload *

DELETE /job/:job_id
  TODO: Reconsider semantics of this being DELETE.
  Description:
    Stop a job if it is running.
  Notes:
    * Requires user authorization
    * No payload
  Server Response:
    a) Status: 204
       Meaning: Successfully deleted the job corresponding with the given ID.
       * No payload *
    b) Status: 403
       Meaning: The client is not authorized to delete this job. The "PKU-API-Session-Token" cookie should be a valid session token corresponding with the user that owns the job corresponding with the given ID.
       * No payload *
    c) Status: 404
       Meaning: No job with the given 'job_id' exists.
       * No payload *

PUT /job/:job_id
  Notes:
    * Requires user authorization
  Client JSON Payload:
    See 'job_put_request.json'
  Server Response:
    a) Status: 200
       Meaning: Job with corresponding 'job_id' exists and it has been successfully changed as requested.
       JSON Payload:
         See 'job.json'
    b) Status: 404
       Meaning: No job with the given 'job_id' exists.
       * No payload *

GET /user/:user_id
  Server Response:
    a) Status: 200
       Meaning: User with corresponding 'user_id' exists.
       JSON Payload:
         See 'user.json'
    b) Status: 404
       Meaning: No user with the given 'user_id' exists.
       JSON Payload:
         See 'client_error.json'

Data Source Interface:
----------------------
Each data source registered in the PKU API has an associated "secret", which is some cryptographically secure string. For each of the requests in this section that include a payload, the following headers are expected to be included:

 PKU-API-Signature: Contains a base64 encoded SHA-256 hash of the data source's secret concatenated with the payload.

TODO: Figure out how to sign GET and DELETE requests.

Client Error Codes
------------------
  TODO -- Will be added as needed.

JSON Field Descriptions
-----------------------

datablock.json:
  

Future Analysis API Functions:
------------------------------

POST /authentication
  Description:
    Establish session with the API server. Sets a cookie on the client-side, namely "PKU-API-Session-Token", that serves as a crypographically secure session identifier.
    Ideally, this would support HTTP Negotiate (SPNEGO) and have JNJ AD/LDAP/Kerberos access.
  TODO

Resources:

  JSON Schema Validation: http://json-schema.org/latest/json-schema-validation.html#anchor37
